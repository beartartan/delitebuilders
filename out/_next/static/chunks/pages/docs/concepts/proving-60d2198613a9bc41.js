(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[6680],{319:function(e,t,r){(window.__NEXT_P=window.__NEXT_P||[]).push(["/docs/concepts/proving",function(){return r(7867)}])},2851:function(e,t,r){"use strict";r.d(t,{Z:function(){return c}});var o=r(1527),n=r(5941),i=r.n(n),a=r(6607),s=r(959),d=r(7669),l=r(3283),c={banner:{key:"banner",text:(0,o.jsx)("a",{href:"/docs/guides",target:"_blank",children:"\uD83D\uDCCC Alpha-3 is here! Get started →"})},chat:{link:"https://discord.gg/delitesystems"},darkMode:!0,docsRepositoryBase:"https://github.com/delitesystems/delite-mono/blob/main/packages/website",editLink:{text:"Edit this page ↗"},feedback:{content:null},footer:{component:function(){return(0,o.jsx)("footer",{className:"bg-neutral-100 dark:bg-neutral-900",children:(0,o.jsxs)("div",{className:"mx-auto max-w-[90rem] pl-3",children:[(0,o.jsxs)("div",{className:"grid grid-cols-2 pl-[max(env(safe-area-inset-left),1.5rem)] pr-[max(env(safe-area-inset-right),1.5rem)] py-8 md:grid-cols-3",children:[(0,o.jsxs)("div",{children:[(0,o.jsx)("h2",{className:"font-grotesk mb-6 text-lg text-neutral-500 dark:text-neutral-300 pt-3",children:"About"}),(0,o.jsxs)("ul",{className:"text-neutral-500 dark:text-neutral-400",children:[(0,o.jsx)("li",{className:"mb-4",children:(0,o.jsx)("a",{href:"https://mirror.xyz/labs.delite.eth",className:"hover:underline",target:"_blank",children:"Blog"})}),(0,o.jsx)("li",{className:"mb-4",children:(0,o.jsx)("a",{href:"https://www.notion.so/delitesystems/Delite-Jobs-828fd7232d2c4150a11e10c8baa910a2",className:"hover:underline",target:"_blank",children:"Careers"})}),(0,o.jsx)("li",{className:"mb-4",children:(0,o.jsx)("a",{href:"https://github.com/delitesystems/delite-mono/tree/main/packages/branding/",className:"hover:underline",target:"_blank",children:"Media kit"})})]})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("h2",{className:"font-grotesk mb-6 text-lg text-neutral-500 dark:text-neutral-300 pt-3",children:"Developers"}),(0,o.jsxs)("ul",{className:"text-neutral-500 dark:text-neutral-400",children:[(0,o.jsx)("li",{className:"mb-4",children:(0,o.jsx)("a",{href:"/docs",className:"hover:underline",children:"Get started"})}),(0,o.jsx)("li",{className:"mb-4",children:(0,o.jsx)("a",{href:"https://github.com/delitesystems",className:"hover:underline",target:"_blank",children:"GitHub"})}),(0,o.jsx)("li",{className:"mb-4",children:(0,o.jsx)("a",{href:"https://delitesystems.github.io/delite-mono/delite-whitepaper.pdf",className:"hover:underline",target:"_blank",children:"Whitepaper"})})]})]}),(0,o.jsxs)("div",{children:[(0,o.jsx)("h2",{className:"font-grotesk mb-6 text-lg text-neutral-500 dark:text-neutral-300 pt-3",children:"Follow us"}),(0,o.jsxs)("ul",{className:"text-neutral-500 dark:text-neutral-400",children:[(0,o.jsx)("li",{className:"mb-4",children:(0,o.jsx)("a",{href:"https://discord.gg/delitesystems",className:"hover:underline",target:"_blank",children:"Discord"})}),(0,o.jsx)("li",{className:"mb-4",children:(0,o.jsx)("a",{href:"https://twitter.com/delitesystems",className:"hover:underline",target:"_blank",children:"Twitter"})}),(0,o.jsx)("li",{className:"mb-4",children:(0,o.jsx)("a",{href:"https://www.youtube.com/@delitesystems",className:"hover:underline",target:"_blank",children:"YouTube"})})]})]})]}),(0,o.jsxs)("div",{className:"font-groteskmedium text-md text-center text-neutral-500 dark:text-neutral-300 bg-neutral-100 dark:bg-neutral-900 px-4 py-6",children:["\xa9 ",new Date().getFullYear()," Delite Labs"]})]})})}},head:()=>{let{asPath:e}=(0,l.useRouter)(),{frontMatter:t}=(0,d.ZR)();return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)("meta",{property:"og:url",content:"https://delite.xyz".concat(e)}),(0,o.jsx)("meta",{property:"og:title",content:t.title||"Delite"}),(0,o.jsx)("meta",{property:"og:description",content:t.description||"A decentralized, Ethereum-equivalent ZK-Rollup."}),(0,o.jsx)("meta",{property:"og:image",content:"/images/Delite_social_media_preview.png"}),(0,o.jsx)("link",{rel:"icon",href:"/images/favicon.svg"})]})},logo:(0,o.jsx)(function(){let{resolvedTheme:e}=(0,a.F)(),[t,r]=(0,s.useState)(null);return(0,s.useEffect)(()=>{r("dark"===e?"/images/logotype-white.png":"/images/logotype-black.png")},[e]),t?(0,o.jsx)(i(),{src:t,width:100,height:100,alt:"logo",style:{width:"100%",height:"auto"}}):null},{}),nextThemes:{defaultTheme:"light"},primaryHue:323,project:{link:"https://github.com/delitesystems"},useNextSeoProps:()=>({titleTemplate:"%s – Delite"})}},7867:function(e,t,r){"use strict";r.r(t);var o=r(1527),n=r(30),i=r(7669),a=r(2851);r(6114),r(7742);var s=r(6736),d=r(5941),l=r.n(d);let c={MDXContent:function(){let e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},{wrapper:t}=Object.assign({},(0,s.ah)(),e.components);return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(p,{...e})}):p(e)},pageOpts:{filePath:"pages/docs/concepts/proving.mdx",route:"/docs/concepts/proving",headings:[{depth:1,value:"Proving Delite blocks",id:"proving-delite-blocks"},{depth:2,value:"Overview",id:"overview"},{depth:2,value:"Verified blocks and parallel proving",id:"verified-blocks-and-parallel-proving"},{depth:2,value:"Types of provers",id:"types-of-provers"},{depth:3,value:"Community prover",id:"community-prover"},{depth:3,value:"Oracle prover",id:"oracle-prover"},{depth:3,value:"System proof",id:"system-proof"},{depth:3,value:"The proof cooldown period",id:"the-proof-cooldown-period"},{depth:2,value:"Prover dynamics",id:"prover-dynamics"},{depth:3,value:"How the proof reward is determined",id:"how-the-proof-reward-is-determined"},{depth:3,value:"Default in simple-delite-node",id:"default-in-simple-delite-node"},{depth:3,value:"Proof skip",id:"proof-skip"},{depth:3,value:"Your role as a prover",id:"your-role-as-a-prover"}],pageMap:[{kind:"Meta",data:{index:{display:"hidden",title:"Delite",type:"page",theme:{layout:"raw"}},docs:{title:"Docs",type:"page"},bridge:{title:"Bridge",type:"page",href:"https://bridge.test.delite.xyz",newWindow:!0},swap:{title:"Swap",type:"page",display:"hidden",href:"https://swap.test.delite.xyz",newWindow:!0},explorers:{title:"Explorers",type:"menu",items:{status:{title:"Protocol Status",href:"https://status.test.delite.xyz",newWindow:!0},"l1-block-explorer":{title:"L1 Block Explorer",href:"https://sepolia.etherscan.io",newWindow:!0},"l2-block-explorer":{title:"L2 Block Explorer",href:"https://explorer.test.delite.xyz",newWindow:!0}}},ecosystem:{title:"Ecosystem",type:"page",theme:{layout:"full"}},blog:{title:"Blog",type:"page",href:"https://mirror.xyz/labs.delite.eth",newWindow:!0},forum:{title:"Forum",type:"page",href:"https://community.delite.xyz/",newWindow:!0},feedback:{title:"Feedback",type:"page",href:"https://forms.gle/9JWjWtjbWytZZcNRA",newWindow:!0}}},{kind:"Folder",name:"docs",route:"/docs",children:[{kind:"Meta",data:{index:{title:"Hello \uD83D\uDC4B"},guides:{title:"Guides"},reference:{title:"Reference"},concepts:{title:"Concepts"},resources:{title:"Resources"}}},{kind:"Folder",name:"concepts",route:"/docs/concepts",children:[{kind:"Meta",data:{overview:{title:"Overview"},proposing:{title:"Proposing Delite blocks"},proving:{title:"Proving Delite blocks"},bridging:{title:"Bridging"},"delite-nodes":{title:"Delite nodes"},"taiko-nodes":"Taiko Nodes"}},{kind:"MdxPage",name:"bridging",route:"/docs/concepts/bridging"},{kind:"MdxPage",name:"overview",route:"/docs/concepts/overview"},{kind:"MdxPage",name:"proposing",route:"/docs/concepts/proposing"},{kind:"MdxPage",name:"proving",route:"/docs/concepts/proving"},{kind:"MdxPage",name:"taiko-nodes",route:"/docs/concepts/taiko-nodes"}]},{kind:"Folder",name:"guides",route:"/docs/guides",children:[{kind:"Meta",data:{"configure-your-wallet":{title:"\uD83D\uDCBB Configure your wallet"},"receive-tokens":{title:"\uD83C\uDF88 Receive tokens"},"use-the-bridge":{title:"\uD83C\uDF09 Use the bridge"},"swap-tokens":{title:"\uD83D\uDD04 Swap tokens"},"run-a-node":{title:"\uD83C\uDF10 Run a node"},"enable-a-proposer":{title:"\uD83D\uDCE4 Enable a proposer"},"enable-a-prover":{title:"✅ Enable a prover"},"deploy-a-contract":{title:"\uD83D\uDE80 Deploy a contract"},"verify-a-contract":{title:"\uD83D\uDCDC Verify a contract"},"build-a-dapp":{title:"\uD83D\uDEE0️ Build a dapp"}}},{kind:"MdxPage",name:"build-a-dapp",route:"/docs/guides/build-a-dapp"},{kind:"MdxPage",name:"configure-your-wallet",route:"/docs/guides/configure-your-wallet"},{kind:"MdxPage",name:"deploy-a-contract",route:"/docs/guides/deploy-a-contract"},{kind:"MdxPage",name:"enable-a-proposer",route:"/docs/guides/enable-a-proposer"},{kind:"MdxPage",name:"enable-a-prover",route:"/docs/guides/enable-a-prover"},{kind:"MdxPage",name:"receive-tokens",route:"/docs/guides/receive-tokens"},{kind:"MdxPage",name:"run-a-node",route:"/docs/guides/run-a-node"},{kind:"MdxPage",name:"swap-tokens",route:"/docs/guides/swap-tokens"},{kind:"MdxPage",name:"use-the-bridge",route:"/docs/guides/use-the-bridge"},{kind:"MdxPage",name:"verify-a-contract",route:"/docs/guides/verify-a-contract"}]},{kind:"MdxPage",name:"guides",route:"/docs/guides"},{kind:"MdxPage",name:"index",route:"/docs"},{kind:"Folder",name:"reference",route:"/docs/reference",children:[{kind:"Meta",data:{"contract-documentation":{title:"Contract documentation"},"contract-addresses":{title:"Contract addresses"},"rpc-configuration":{title:"RPC configuration"}}},{kind:"MdxPage",name:"contract-addresses",route:"/docs/reference/contract-addresses"},{kind:"Folder",name:"contract-documentation",route:"/docs/reference/contract-documentation",children:[{kind:"Folder",name:"L1",route:"/docs/reference/contract-documentation/L1",children:[{kind:"MdxPage",name:"TaikoConfig",route:"/docs/reference/contract-documentation/L1/TaikoConfig",frontMatter:{title:"DeliteConfig"}},{kind:"MdxPage",name:"TaikoData",route:"/docs/reference/contract-documentation/L1/TaikoData",frontMatter:{title:"DeliteData"}},{kind:"MdxPage",name:"TaikoErrors",route:"/docs/reference/contract-documentation/L1/TaikoErrors",frontMatter:{title:"DeliteErrors"}},{kind:"MdxPage",name:"TaikoEvents",route:"/docs/reference/contract-documentation/L1/TaikoEvents",frontMatter:{title:"DeliteEvents"}},{kind:"MdxPage",name:"TaikoL1",route:"/docs/reference/contract-documentation/L1/TaikoL1",frontMatter:{title:"DeliteL1"}},{kind:"MdxPage",name:"TaikoToken",route:"/docs/reference/contract-documentation/L1/TaikoToken",frontMatter:{title:"LibDeliteTokenConfig"}},{kind:"Meta",data:{TaikoConfig:"DeliteConfig",TaikoData:"DeliteData",TaikoErrors:"DeliteErrors",TaikoEvents:"DeliteEvents",TaikoL1:"DeliteL1",TaikoToken:"LibDeliteTokenConfig"}}]},{kind:"Folder",name:"L2",route:"/docs/reference/contract-documentation/L2",children:[{kind:"MdxPage",name:"LibL2Consts",route:"/docs/reference/contract-documentation/L2/LibL2Consts",frontMatter:{title:"LibL2Consts"}},{kind:"MdxPage",name:"TaikoL2",route:"/docs/reference/contract-documentation/L2/TaikoL2",frontMatter:{title:"DeliteL2"}},{kind:"MdxPage",name:"TaikoL2Signer",route:"/docs/reference/contract-documentation/L2/TaikoL2Signer",frontMatter:{title:"DeliteL2Signer"}},{kind:"Meta",data:{TaikoL2:"DeliteL2",TaikoL2Signer:"DeliteL2Signer",LibL2Consts:"LibL2Consts"}}]},{kind:"Folder",name:"bridge",route:"/docs/reference/contract-documentation/bridge",children:[{kind:"MdxPage",name:"Bridge",route:"/docs/reference/contract-documentation/bridge/Bridge",frontMatter:{title:"Bridge"}},{kind:"MdxPage",name:"BridgeErrors",route:"/docs/reference/contract-documentation/bridge/BridgeErrors",frontMatter:{title:"BridgeErrors"}},{kind:"MdxPage",name:"BridgedERC20",route:"/docs/reference/contract-documentation/bridge/BridgedERC20",frontMatter:{title:"BridgedERC20"}},{kind:"MdxPage",name:"EtherVault",route:"/docs/reference/contract-documentation/bridge/EtherVault",frontMatter:{title:"EtherVault"}},{kind:"MdxPage",name:"IBridge",route:"/docs/reference/contract-documentation/bridge/IBridge",frontMatter:{title:"IBridge"}},{kind:"MdxPage",name:"TokenVault",route:"/docs/reference/contract-documentation/bridge/TokenVault",frontMatter:{title:"TokenVault"}},{kind:"Meta",data:{Bridge:"Bridge",BridgedERC20:"BridgedERC20",BridgeErrors:"BridgeErrors",EtherVault:"EtherVault",IBridge:"IBridge",TokenVault:"TokenVault"}}]},{kind:"Folder",name:"common",route:"/docs/reference/contract-documentation/common",children:[{kind:"MdxPage",name:"AddressManager",route:"/docs/reference/contract-documentation/common/AddressManager",frontMatter:{title:"IAddressManager"}},{kind:"MdxPage",name:"AddressResolver",route:"/docs/reference/contract-documentation/common/AddressResolver",frontMatter:{title:"AddressResolver"}},{kind:"MdxPage",name:"ICrossChainSync",route:"/docs/reference/contract-documentation/common/ICrossChainSync",frontMatter:{title:"ICrossChainSync"}},{kind:"MdxPage",name:"IMintableERC20",route:"/docs/reference/contract-documentation/common/IMintableERC20",frontMatter:{title:"IMintableERC20"}},{kind:"MdxPage",name:"Proxied",route:"/docs/reference/contract-documentation/common/Proxied",frontMatter:{title:"Proxied"}},{kind:"Meta",data:{AddressResolver:"AddressResolver",AddressManager:"IAddressManager",ICrossChainSync:"ICrossChainSync",IMintableERC20:"IMintableERC20",Proxied:"Proxied"}}]},{kind:"Folder",name:"gov",route:"/docs/reference/contract-documentation/gov",children:[{kind:"MdxPage",name:"TaikoGovernor",route:"/docs/reference/contract-documentation/gov/TaikoGovernor",frontMatter:{title:"DeliteGovernor"}},{kind:"Meta",data:{TaikoGovernor:"DeliteGovernor"}}]},{kind:"Folder",name:"signal",route:"/docs/reference/contract-documentation/signal",children:[{kind:"MdxPage",name:"ISignalService",route:"/docs/reference/contract-documentation/signal/ISignalService",frontMatter:{title:"ISignalService"}},{kind:"MdxPage",name:"SignalService",route:"/docs/reference/contract-documentation/signal/SignalService",frontMatter:{title:"SignalService"}},{kind:"Meta",data:{ISignalService:"ISignalService",SignalService:"SignalService"}}]}]},{kind:"MdxPage",name:"rpc-configuration",route:"/docs/reference/rpc-configuration"}]},{kind:"Folder",name:"resources",route:"/docs/resources",children:[{kind:"Meta",data:{contributing:{title:"Contributing"},"official-links":{title:"Official links"},talks:{title:"Talks"},"rollup-glossary":{title:"Rollup glossary"},whitepaper:{title:"Whitepaper"}}},{kind:"MdxPage",name:"contributing",route:"/docs/resources/contributing"},{kind:"MdxPage",name:"official-links",route:"/docs/resources/official-links"},{kind:"MdxPage",name:"rollup-glossary",route:"/docs/resources/rollup-glossary"},{kind:"MdxPage",name:"talks",route:"/docs/resources/talks"},{kind:"MdxPage",name:"whitepaper",route:"/docs/resources/whitepaper"}]}]},{kind:"MdxPage",name:"ecosystem",route:"/ecosystem"},{kind:"MdxPage",name:"index",route:"/",frontMatter:{title:"Home"}}],flexsearch:{codeblocks:!0},title:"Proving Delite blocks"},pageNextRoute:"/docs/concepts/proving",nextraLayout:i.ZP,themeConfig:a.Z};function p(e){let t=Object.assign({h1:"h1",h2:"h2",p:"p",ul:"ul",li:"li",strong:"strong",h3:"h3",code:"code",a:"a"},(0,s.ah)(),e.components);return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.h1,{children:"Proving Delite blocks"}),"\n",(0,o.jsx)(t.h2,{id:"overview",children:"Overview"}),"\n",(0,o.jsx)(t.p,{children:'The purpose of proving blocks is to give certainty to bridges about the execution that happened in the rollup. To rely on some state that happened inside of the rollup, a bridge will want a proof that everything was done correctly. On Delite you can run a node as a prover and prove blocks, permissionlessly. This means that you can examine the proposed blocks on the DeliteL1 contract, and generate proofs for them. Currently, any prover can create proofs for proposed blocks. This means that the number of "fork choices" has no upper bound, because we don\'t know what is the correct state transition yet. Only first prover with a valid proof of the correct fork choice (state transition) will receive the reward of TTKO.'}),"\n",(0,o.jsx)(t.h2,{id:"verified-blocks-and-parallel-proving",children:"Verified blocks and parallel proving"}),"\n",(0,o.jsx)(t.p,{children:"There are three states that a block can be in on Delite:"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:"Proposed"}),"\n",(0,o.jsx)(t.li,{children:"Proved"}),"\n",(0,o.jsx)(t.li,{children:"Verified"}),"\n"]}),"\n",(0,o.jsx)(t.p,{children:"We already know what a proposed block is (must pass at least the block-level intrinsic validity tests to be accepted by the DeliteL1 contract). Next, a proposed block can be valid or invalid, depending on whether it passes the transaction list intrinsic validity test. A block is invalid if it fails the transaction list intrinsic validity test, and this block is not created on Delite."}),"\n",(0,o.jsx)(t.p,{children:'Now, a block can be proved, but also further "verified". What\'s the difference? A block is proved if it has a valid proof which proves a state transition from one state (parent block) to another (current block). However, blocks are proven in parallel by the decentralized provers. So while a block can prove a parent block transitions to the current block, we don\'t know if the parent block itself has been proven. As you can see, for a block to be "verified", it needs to prove the valid state transition to the current block, but the parent also need to be verified. We assume that the genesis block (which has no parent), is verified. So all the children blocks from genesis to the current block need to have proofs of their state transition for the current block to be "verified".'}),"\n",(0,o.jsx)(t.p,{children:"For the visual learners here is a visualization of the three stages (proposed -> proved -> verified)"}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Proposed:"})}),"\n",(0,o.jsx)("center",{children:(0,o.jsx)(l(),{src:"/images/diagrams/concepts/proving-delite-blocks/proposed.png",alt:"proposed",width:400,height:400})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Proved:"})}),"\n",(0,o.jsx)("center",{children:(0,o.jsx)(l(),{src:"/images/diagrams/concepts/proving-delite-blocks/proved.png",alt:"proved",width:400,height:400})}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.strong,{children:"Verified:"})}),"\n",(0,o.jsx)("center",{children:(0,o.jsx)(l(),{src:"/images/diagrams/concepts/proving-delite-blocks/verified.png",alt:"verified",width:400,height:400})}),"\n",(0,o.jsx)(t.h2,{id:"types-of-provers",children:"Types of provers"}),"\n",(0,o.jsx)(t.h3,{id:"community-prover",children:"Community prover"}),"\n",(0,o.jsx)(t.p,{children:"Currently, you only need a single proof from the any prover to verify a block."}),"\n",(0,o.jsx)(t.h3,{id:"oracle-prover",children:"Oracle prover"}),"\n",(0,o.jsx)(t.p,{children:"The oracle prover is a prover from a unique address (our own address) that is able to override the community prover. This is a safety mechanism we have in place while the ZK-EVM is still in development and in case an invalid block was marked as verified from a community proof."}),"\n",(0,o.jsx)(t.h3,{id:"system-proof",children:"System proof"}),"\n",(0,o.jsx)(t.p,{children:"A system proof is a fake proof that is generated by the system to mark a block as verified. We only require a real proof to be generated every N blocks. Otherwise, we accept a fake, system proof, and mark the block as verified. This is a temporary testnet feature to reduce the cost for community provers."}),"\n",(0,o.jsx)(t.h3,{id:"the-proof-cooldown-period",children:"The proof cooldown period"}),"\n",(0,o.jsx)(t.p,{children:"We have a proof cooldown period which is an interval of time we set after fully verifying a block. The reason we do that is to allow for a fault proof to come in, once we have a multi-prover system set in place."}),"\n",(0,o.jsx)(t.h2,{id:"prover-dynamics",children:"Prover dynamics"}),"\n",(0,o.jsx)(t.h3,{id:"how-the-proof-reward-is-determined",children:"How the proof reward is determined"}),"\n",(0,o.jsxs)(t.p,{children:["A proof reward in TTKO is rewarded for successfully proving a block. This reward is dependent on the ",(0,o.jsx)(t.code,{children:"proofTimeTarget"}),". You can see the current proof reward by calling ",(0,o.jsx)(t.code,{children:"getProofReward"})," on the DeliteL1 contract."]}),"\n",(0,o.jsx)(t.p,{children:"So that we don't grow a long list of unverified blocks for too long, we want to target proofs coming in at a certain rate. So we set a target proof time. If it has taken a long time since the last verified block, the proof reward increases to incentivize provers to generate a proof."}),"\n",(0,o.jsxs)(t.p,{children:["Conversely, if everyone is submitting proofs quickly, then the proof reward decreases towards zero. This means that as a prover, you should query ",(0,o.jsx)(t.code,{children:"getProofReward"})," on the DeliteL1 contract to determine if it is profitable to generate a proof. If you submit proofs as quickly as possible, then the proof reward will trend towards zero."]}),"\n",(0,o.jsx)(t.h3,{id:"default-in-simple-delite-node",children:"Default in simple-delite-node"}),"\n",(0,o.jsxs)(t.p,{children:["The ",(0,o.jsx)(t.a,{href:"https://github.com/delitesystems/simple-delite-node",children:"simple-delite-node"})," will come pre-configured to not submit proofs as quickly as possible, by querying ",(0,o.jsx)(t.code,{children:"getProofReward"}),". This hopefully means that most nodes in the network are acting in the group interest, by responsibly not submitting the proof as quickly as possible. However, because the first prover will win the reward, and because the project is open source, anybody can modify the ",(0,o.jsx)(t.a,{href:"https://github.com/delitesystems/delite-client",children:"delite-client"})," and act rationally to submit a proof slightly earlier than the default set in ",(0,o.jsx)(t.code,{children:"simple-delite-node"}),". As you can see, it causes somewhat of a prisoner's dilemma."]}),"\n",(0,o.jsx)(t.h3,{id:"proof-skip",children:"Proof skip"}),"\n",(0,o.jsxs)(t.p,{children:["We have a ",(0,o.jsx)(t.code,{children:"realProofSkipSize"})," set ",(0,o.jsx)(t.a,{href:"https://github.com/delitesystems/delite-mono/blob/main/packages/protocol/contracts/L1/DeliteConfig.sol#LL40C13-L40C30",children:"here"})," so that a real proof is only needed every N blocks for the testnet."]}),"\n",(0,o.jsx)(t.h3,{id:"your-role-as-a-prover",children:"Your role as a prover"}),"\n",(0,o.jsx)(t.p,{children:"We are describing this dynamic so you can be informed when you run a prover. It's very possible that without the correct strategy, you will not be profitable as a prover. You are naturally competing in an open space where others could have more efficient hardware and generate a proof in a short amount of time that you cannot compete against."})]})}t.default=(0,n.j)(c)}},function(e){e.O(0,[4735,9774,2888,179],function(){return e(e.s=319)}),_N_E=e.O()}]);